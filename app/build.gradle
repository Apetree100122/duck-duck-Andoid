plugins {
    id 'com.android.application'
    id 'kotlin-kapt'
    id 'kotlin-android'
    id 'com.google.devtools.ksp' version "$ksp_version"
    id 'com.squareup.anvil'
}
apply from: "$rootDir/versioning.gradle"
apply from: "$rootDir/code-formatting.gradle"

ext {
    USE_ORCHESTRATOR = project.hasProperty('orchestrator') ? project.property('orchestrator') : false
    CI_HOME_DIR = "${System.getenv('HOME')}/jenkins_static/com.duckduckgo.mobile.android"
}

android {
    defaultConfig {
        if (project.hasProperty('internal-testing')) {
            applicationId "com.duckduckgo.dev.android"
        } else {
            applicationId "com.duckduckgo.mobile.android"
        }
        minSdk min_sdk
        targetSdk target_sdk
        compileSdk compile_sdk
        versionCode buildVersionCode()
        versionName buildVersionName()
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        archivesBaseName = "duckduckgo-$versionName"
        vectorDrawables.useSupportLibrary = true
        javaCompileOptions {
            annotationProcessorOptions {
                arguments = ["room.schemaLocation": "$projectDir/schemas".toString()]
            }
        }
        sourceSets {
            androidTest.assets.srcDirs += files("$projectDir/schemas".toString())
            main {
                java {
                    resources {
                        srcDirs += files("$projectDir/../node_modules/@duckduckgo/autofill/dist/".toString())
                        srcDirs += files("$projectDir/../submodules/".toString())
                    }
                }
                assets {
                    srcDirs += files("$projectDir/../node_modules/@duckduckgo/privacy-dashboard/build/app".toString())
                }
            }
        }

        if (project.hasProperty('perf-test')) {
            buildConfigField "boolean", "IS_PERFORMANCE_TEST", "true"
        } else {
            buildConfigField "boolean", "IS_PERFORMANCE_TEST", "false"
        }
        if (project.hasProperty('force-default-variant')) {
            buildConfigField "boolean", "FORCE_DEFAULT_VARIANT", "true"
        } else {
            buildConfigField "boolean", "FORCE_DEFAULT_VARIANT", "false"
        }
        namespace 'com.duckduckgo.app.abc'
    }
    buildFeatures {
        viewBinding = true
    }
    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_17
        targetCompatibility = JavaVersion.VERSION_17
    }
    kotlin {
        jvmToolchain(17)
    }
    signingConfigs {
        release
    }
    buildTypes {
        debug {
            if (!project.hasProperty('internal-testing')) {
                applicationIdSuffix ".debug"
            }
            pseudoLocalesEnabled false
            manifestPlaceholders = [
                    appIcon     : "@mipmap/ic_launcher_blue",
                    appIconRound: "@mipmap/ic_launcher_blue_round"
            ]
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
            manifestPlaceholders = [
                    appIcon     : "@mipmap/ic_launcher_red",
                    appIconRound: "@mipmap/ic_launcher_red_round"
            ]
        }
    }
    flavorDimensions "store"
    productFlavors {
        internal {
            dimension "store"
        }
        fdroid {
            dimension "store"
        }
        play {
            dimension "store"
        }
    }
    variantFilter { variant ->
        def names = variant.flavors*.name
        if (names.contains("fdroid") && variant.buildType.name == "debug") {
            // We don't need fdroidDebug build type
            setIgnore(true)
        }
    }
    lint {
        abortOnError true
        ignoreTestSources false
        baseline file("lint-baseline.xml")
    }
    testOptions {
        unitTests.returnDefaultValues = true
        animationsDisabled = true
    }

    def propertiesPath = "${CI_HOME_DIR}/ddg_android_build.properties"
    def propertiesFile = new File(propertiesPath)
    if (propertiesFile.exists()) {
        def props = new Properties()
        props.load(new FileInputStream(propertiesFile))
        android.signingConfigs.release.storeFile = file("${CI_HOME_DIR}/${props['key.store']}")
        android.signingConfigs.release.storePassword = props['key.store.password']
        android.signingConfigs.release.keyAlias = props['key.alias']
        android.signingConfigs.release.keyPassword = props['key.alias.password']
    } else {
        println "Signing properties not found at ${propertiesPath}, releases will NOT succeed"
        android.buildTypes.release.signingConfig = null
    }
}

fulladleModuleConfig {
    variant.set("playDebug")
}

fladle {
    configs {
        privacyTests {
            async.set(false)
            variant.set("playDebug")
            flankVersion.set("21.+")
            useOrchestrator.set(true)
            environmentVariables.set([
                    "clearPackageData": "true"
            ])
            testTargets.set([
                    "annotation com.duckduckgo.espresso.PrivacyTest"
            ])
            devices.set([
                    ["model": "redfin", "version": "30"]
            ])
            localResultsDir.set("fladleResults")
            flakyTestAttempts.set(2)
            testShards.set(1)
        }
    }
}

dependencies {
    implementation project(":browser-impl")
    implementation project(':navigation-api')
    implementation project(':navigation-impl')

    implementation project(path: ':vpn-network-api')
    implementation project(path: ':vpn-network-impl')

    implementation project(':library-loader-api')

    implementation project(':autofill-api')
    implementation project(':autofill-impl')
    implementation project(':autofill-store')
    internalImplementation project(':autofill-internal')
    testImplementation project(':autofill-test')

    anvil project(':anvil-compiler')
    implementation project(':anvil-annotations')

    implementation project(':app-build-config-api')
    implementation project(':browser-api')
    implementation project(':statistics')
    implementation project(':experiments-api')
    implementation project(':experiments-impl')
    implementation project(':common-utils')
    implementation project(':app-store')
    implementation project(':common-ui')
    internalImplementation project(':common-ui-internal')
    implementation project(':di')
    implementation project(':app-tracking-api')
    implementation project(':vpn-impl')
    implementation project(':vpn-api')
    implementation project(':vpn-store')
    internalImplementation project(':vpn-internal')

    implementation project(':feature-toggles-api')
    testImplementation project(':feature-toggles-test')
    implementation project(':feature-toggles-impl')
    implementation project(':privacy-config-api')
    implementation project(':privacy-config-impl')
    implementation project(':privacy-config-store')
    internalImplementation project(':privacy-config-internal')

    implementation project(':anrs-api')
    implementation project(':anrs-store')
    implementation project(':anrs-impl')
    implementation project(':macos-api')
    implementation project(':macos-impl')

    implementation project(':privacy-dashboard-api')
    implementation project(':privacy-dashboard-impl')

    implementation project(':remote-messaging-api')
    implementation project(':remote-messaging-impl')
    implementation project(':remote-messaging-store')

    implementation project(':voice-search-api')
    implementation project(':voice-search-impl')
    implementation project(':voice-search-store')

    implementation project(':downloads-api')
    implementation project(':downloads-impl')
    implementation project(':downloads-store')

    internalImplementation project(':traces-api')
    internalImplementation project(':traces-impl')

    implementation project(':site-permissions-api')
    implementation project(':site-permissions-impl')

    implementation project(':ad-click-api')
    implementation project(':ad-click-impl')
    implementation project(':ad-click-store')

    implementation project(':autoconsent-api')
    implementation project(':autoconsent-impl')
    implementation project(':autoconsent-store')

    implementation project(':cookies-api')
    implementation project(':cookies-impl')
    implementation project(':cookies-store')

    implementation project(':content-scope-scripts-api')
    implementation project(':content-scope-scripts-impl')

    implementation project(':network-protection-api')
    implementation project(':network-protection-impl')
    internalImplementation project(':network-protection-internal')
    implementation project(':network-protection-store')

    implementation project(':fingerprint-protection-api')
    implementation project(':fingerprint-protection-impl')
    implementation project(':fingerprint-protection-store')

    implementation project(':element-hiding-impl')
    implementation project(':element-hiding-store')

    implementation project(':httpsupgrade-api')
    implementation project(':httpsupgrade-impl')
    implementation project(':httpsupgrade-store')

    implementation project(':sync-api')
    implementation project(':sync-impl')
    internalImplementation project(':sync-internal')
    implementation project(':sync-store')
    implementation project(':sync-lib')
    implementation project(':sync-settings-api')
    implementation project(':sync-settings-impl')

    implementation project(':request-filterer-api')
    implementation project(':request-filterer-impl')
    implementation project(':request-filterer-store')

    implementation project(':windows-api')
    implementation project(':windows-impl')
    implementation project(':saved-sites-api')
    implementation project(':saved-sites-impl')
    implementation project(':saved-sites-store')

    implementation project(':runtime-checks-impl')
    implementation project(':runtime-checks-store')

    implementation project(':installation-impl')

    implementation project(':internal-features-api')

    implementation project(':web-compat-impl')
    implementation project(':web-compat-store')

    if (project.hasProperty('internal-testing')) {
        implementation project(':subscriptions-api')
        implementation project(':subscriptions-impl')
        implementation project(':subscriptions-store')
        internalImplementation project(':subscriptions-internal')
        internalImplementation project(':network-protection-subscription-internal')
    }

    implementation project(':user-agent-api')
    implementation project(':user-agent-impl')

    implementation project(':js-messaging-api')
    implementation project(':js-messaging-impl')

    implementation project(':settings-api')
    implementation project(':settings-impl')

    implementation project(':broken-site-api')
    implementation project(':broken-site-impl')
    implementation project(':broken-site-store')

    implementation project(':backup-agent-api')
    implementation project(':backup-agent-impl')

    implementation KotlinX.coroutines.core
    implementation AndroidX.lifecycle.process
    implementation JakeWharton.timber
    implementation "io.reactivex.rxjava2:rxjava:_"
    implementation "io.reactivex.rxjava2:rxandroid:_"
    implementation "com.jakewharton.threetenabp:threetenabp:_"
    implementation Square.okHttp3.okHttp
    implementation "com.squareup.okhttp3:okhttp-tls:_"
    // Added these below as otherwise dagger-generated code will not find type reference
    implementation AndroidX.webkit
    internalImplementation "com.facebook.flipper:flipper:_"
    implementation Square.retrofit2.retrofit
    implementation Square.moshi
    implementation AndroidX.work.runtimeKtx
    implementation AndroidX.appCompat
    implementation Google.android.material
    implementation "androidx.localbroadcastmanager:localbroadcastmanager:_"

    // Glide
    implementation "com.github.bumptech.glide:glide:_"
    implementation "com.github.bumptech.glide:okhttp3-integration:_"
    ksp "com.github.bumptech.glide:ksp:_"

    kapt Google.dagger.compiler
    implementation Google.dagger
}

tasks.register('fastlaneVersionCode') {
    doLast {
        print buildVersionCode()
    }
}

tasks.register('checks') {
    dependsOn 'jvm_checks', 'android_checks'
}

tasks.register('android_checks') {
    dependsOn 'connectedPlayDebugAndroidTest'
}

tasks.register('jvm_checks') {
    dependsOn 'spotlessCheck', 'lint', 'testPlayDebugUnitTest'
}

tasks.register('lint_check') {
    dependsOn 'lint'
}

tasks.register('jvm_tests') {
    dependsOn 'testPlayDebugUnitTest'
}

tasks.register('androidTestsBuild') {
    dependsOn 'assemblePlayDebug', 'assemblePlayDebugAndroidTest'
}

tasks.register('releaseTestLocal', Exec) {
    commandLine 'maestro', 'test', '--include-tags', 'releaseTest', '../.maestro'
    dependsOn 'installPlayRelease'
}

tasks.register('releaseTestCloud', Exec) {
    commandLine 'maestro', 'cloud', '--include-tags', 'releaseTest', "build/outputs/apk/play/release/duckduckgo-${buildVersionName()}-play-release.apk", '../.maestro'
    dependsOn 'assemblePlayRelease'
}

task newModule(type: com.duckduckgo.gradle.ModuleCreator) {
    feature = project.hasProperty('feature') ? project.getProperty('feature') : null
}